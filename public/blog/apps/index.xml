<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apps on John Montroy</title>
    <link>http://localhost:1313/blog/apps/</link>
    <description>Recent content in Apps on John Montroy</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Copyright Â© 2025, John Montroy.</copyright>
    <lastBuildDate>Wed, 06 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/apps/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift (Day 2)  - Signature Zoo</title>
      <link>http://localhost:1313/swift-day-2-signature-zoo/</link>
      <pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/swift-day-2-signature-zoo/</guid>
      <description>&lt;p&gt;I alluded last time to the density of keywords and language primitives in Swift being quite ample (reminds me of my experience learning Rust, and my [extensive] time with Scala). As I mess around with the vanilla tutorials above, I&amp;rsquo;m diving into some definitions (cmd + Click in Xcode), which are quite illuminating. Let&amp;rsquo;s take a few and talk about them.&lt;/p&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;View&lt;!-- raw HTML omitted --&gt;&lt;strong&gt;:&lt;/strong&gt; the very first protocol you encounter when working with SwiftUI:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Swift (Day 1)  - Ecosystem, Language Primitives, Resources</title>
      <link>http://localhost:1313/swift-day-1-ecosystem-language-primitives-resources/</link>
      <pubDate>Mon, 28 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/swift-day-1-ecosystem-language-primitives-resources/</guid>
      <description>&lt;p&gt;I wanna make an app. iOS for starters (it&amp;rsquo;s what my friend and I have). Have several ideas, have friends with several ideas. Wanna blog about the process, so here we go.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Ecosystem&lt;/strong&gt;: &lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;XCode&lt;/a&gt; + &lt;a href=&#34;https://www.swift.org/documentation/&#34;&gt;Swift&lt;/a&gt; + &lt;a href=&#34;https://developer.apple.com/xcode/swiftui/&#34;&gt;SwiftUI&lt;/a&gt;.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;XCode is a nice IDE so far - a lot of shortcuts map over from my IntelliJ experience, and the auto-compiling preview functionality + different compilation targets has been smooth and transparent.&lt;/li&gt;&#xA;&lt;li&gt;I&amp;rsquo;m not gonna mess with &lt;a href=&#34;https://getuikit.com/&#34;&gt;UIKit&lt;/a&gt; at all.&lt;/li&gt;&#xA;&lt;li&gt;I&amp;rsquo;m sad that Android uses Kotlin, I wanted to learn Kotlin. But both ecosystems are fairly locked, what with Android being a Kotlin + Jetpack Compose world.&lt;/li&gt;&#xA;&lt;li&gt;Cross-platform builds seem crippled by the usual suspects - lack of investment from the native platforms, complex access and abstraction to native primitives, native performance greatly exceeding cross-platform, etc. Options include &lt;a href=&#34;https://dart.dev/overview&#34;&gt;Dart + Flutter&lt;/a&gt; (also from Google), and &lt;a href=&#34;https://kotlinlang.org/docs/multiplatform.html&#34;&gt;Kotlin Multiplatform&lt;/a&gt;. For now, I&amp;rsquo;ll stick to the native platforms.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Language Primitives&lt;/strong&gt;: Swift has a lot of them! This is a really &amp;ldquo;feature-rich&amp;rdquo; language - I&amp;rsquo;m gonna miss Go. Some ones that have stuck out:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Multiple initializers (designated, overloaded, convenience)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/extensions/&#34;&gt;Extensions&lt;/a&gt; (like Scala&amp;rsquo;s implicit classes, it seems)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://medium.com/@talhasaygili/internal-and-external-parameter-names-in-swift-ae33aebbd859&#34;&gt;Internal + external function argument names&lt;/a&gt; (a new one for me, not sold yet)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/statements/#Guard-Statement&#34;&gt;Guard statements&lt;/a&gt; (safe unwrapping is nice)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/protocols/&#34;&gt;Protocols&lt;/a&gt; (composable + inheritable, embedded generics via associatedtype)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/classesandstructures&#34;&gt;Structs AND classes&lt;/a&gt; (small differences)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://swiftrocks.com/how-async-await-works-internally-in-swift&#34;&gt;Actors, async / await, queues&lt;/a&gt; too&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/attributes/#preconcurrency&#34;&gt;Attributes&lt;/a&gt; galore (&lt;a href=&#34;https://developer.apple.com/documentation/swift/mainactor&#34;&gt;@MainActor&lt;/a&gt;, &lt;strong&gt;@inlinable&lt;/strong&gt;, &lt;strong&gt;@preconcurrency&lt;/strong&gt;, &lt;strong&gt;@frozen&lt;/strong&gt; etc.)&lt;/li&gt;&#xA;&lt;li&gt;So many ways to modify access, concurrency, optimizations via &lt;a href=&#34;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/properties/&#34;&gt;properties&lt;/a&gt; / &lt;a href=&#34;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/accesscontrol/&#34;&gt;access control&lt;/a&gt; (things like &lt;strong&gt;nonisolated, fileprivate, static&lt;/strong&gt;, etc. &amp;ndash; they all map to relatively sane, known concepts, but yeesh).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Learning&lt;/strong&gt;: good resources so far.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ChatGPT-4o is my first line of inquiry for exploration. Super useful so far.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;a href=&#34;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/&#34;&gt;Swift book&lt;/a&gt; seems well-done.&lt;/li&gt;&#xA;&lt;li&gt;Apple has &lt;a href=&#34;https://developer.apple.com/swift/resources/&#34;&gt;good resources including tutorials&lt;/a&gt;.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;I&amp;rsquo;ve started with the &lt;a href=&#34;https://developer.apple.com/tutorials/develop-in-swift/&#34;&gt;Develop with Swift&lt;/a&gt; tutorial - lots of basics, but well-done.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/tutorials/sample-apps/&#34;&gt;Swift Playgrounds&lt;/a&gt; are useful for a lot of sample apps.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;The Exercism &lt;a href=&#34;https://exercism.org/challenges/48in24&#34;&gt;#48in24&lt;/a&gt; challenges will be good for brushing up basics (with Golang too!).&lt;/li&gt;&#xA;&lt;li&gt;I found some Swift repos I want to use as references, &lt;a href=&#34;https://github.com/stars/jmontroy90/lists/good-swift&#34;&gt;listed here&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;This &lt;a href=&#34;https://github.com/dkhamsing/open-source-ios-apps&#34;&gt;list of open-source iOS apps&lt;/a&gt; will be useful for perusal; filter for most stars with &amp;ldquo;swiftui&amp;rdquo; tag:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -o apps.json &amp;#34;https://raw.githubusercontent.com/dkhamsing/open-source-ios-apps/refs/heads/master/contents.json&amp;#34;&#xA;jq &amp;#39;.projects | map(select((.tags | index(&amp;#34;swiftui&amp;#34;)) and .stars != null)) | sort_by(-.stars)&amp;#39; apps.json &amp;gt; filtered_apps.json&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lots to learn and do! Let&amp;rsquo;s see how this goes.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
